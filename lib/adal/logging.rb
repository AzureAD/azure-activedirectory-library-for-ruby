#-------------------------------------------------------------------------------
# Copyright (c) 2015 Micorosft Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#-------------------------------------------------------------------------------

require 'securerandom'

module ADAL
  # Mix-in module for the ADAL logger. To obtain a logger in class methods the
  # calling class will need to extend this module. To obtain a logger in
  # instance methods the calling will need to include this Module.
  module Logging
    DEFAULT_LOG_LEVEL = ADLogger::ERROR
    DEFAULT_LOG_OUTPUT = STDOUT

    @correlation_id = SecureRandom.uuid
    @log_level = DEFAULT_LOG_LEVEL
    @log_output = DEFAULT_LOG_OUTPUT

    # According to the style guide, class instance variables are preferable to
    # class variables.
    class << self
      attr_accessor :correlation_id
      attr_accessor :log_level
      attr_accessor :log_output
    end

    ##
    # Sets the ADAL log level.
    #
    # Example usage:
    #
    #     ADAL::Logging.log_level = ADAL::ADLogger::VERBOSE
    #
    def self.log_level=(level)
      unless ADLogger::SEVS.map.with_index { |_, i| i }.include? level
        fail ArgumentError, "Invalid log level: #{level}."
      end
      @log_level = level
    end

    ##
    # Sets the ADAL log output. All future logs generated by ADAL will be sent
    # to this location. It is not retroactive.
    #
    # @param IO|String output
    #   This can either be STDERR, STDOUT or a String containing a file path.
    def self.log_output=(output)
      output = output.to_s unless output.is_a? IO
      @log_output = output
    end

    ##
    # Creates one ADAL logger per calling class/module with a specified output.
    # This is to be used within ADAL. Clients will have no use for it.
    #
    # Examples usage:
    #
    #   require_relative './logging'
    #
    #   module ADAL
    #     module SomeModule
    #       include Logging
    #
    #       def something_bad
    #         logger.error('An error message')
    #       end
    #     end
    #  end
    #
    # @param output
    #   STDERR, STDOUT or the file name as a string.
    def logger
      @logger ||= ADAL::ADLogger.new(Logging.log_output, Logging.correlation_id)
      @logger.level = Logging.log_level || DEFAULT_LOG_LEVEL
      @logger
    end
  end
end
